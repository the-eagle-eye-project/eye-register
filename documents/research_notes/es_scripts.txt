# Click the Variables button, above, to create your own variables.
GET ${exampleVariable1} // _search
{
  "query": {
    "${exampleVariable2}": {} // match_all
  }
}

GET /_cluster/health

GET /_cat/nodes?v

# Creates an index
PUT logs
{
  "mappings": {
    "properties": {
      "transaction_id": {
        "type": "text"
      },
      "application_id": {
        "type": "text"
      },
      "application_step": {
        "type": "text"
      },
      "event_timestamp": {
        "type": "date"
      },
      "request_body": {
        "type": "text"
      },
      "request_uri": {
        "type": "text"
      },
      "source_host": {
        "type": "text"
      },
      "transaction_status": {
        "type": "text"
      }
    }
  }
}

# Search for all the documents in the index
GET /logs/_search
{
  "query": {
    "match_all": {}
  }
}

# Gets a specific document by _id
GET /logs/_doc/1098747

# Will Create a new document with a specific _id
POST /logs/_doc/1098747
{
  "transaction_id" : "ddslkhkj7869873-eoaijoihfikjbiu",
  "application_id" : "JOHN_APP",
  "event_timestamp" : "2023-06-23",
  "request_body" : "{}",
  "request_url" : "/req",
  "source_host" : "156.45.99.01",
  "transaction_status" : "200"
}

# Update a specific document
POST /logs/_update/1098747
{
  "doc": {
    "request_url" : "/req/updated"
  }
}

# Adds a new tag to the document
POST /logs/_update/1098747
{
  "doc" : {
    "tags" : ["new tag"]
  }
}

POST /logs/_update/1098747
{
  "doc" : {
    "number_value" : 1
  }
}

# Udpate a record with a script
# increase the status by 1
POST /logs/_update/1098747
{
  "script": {
    "source": "ctx._source.number_value++"
  }
}
# Gets a specific document by _id
GET /logs/_doc/1098747

POST /logs/_update/1098747
{
  "script": {
    "source": "ctx._source.number_value = 9"
  }
}

# Update a record using parameters
POST /logs/_update/1098747
{
  "script": {
    "source": "ctx._source.number_value = params.no_value",
    "params": {
      "no_value": 3
    }
  }
}

POST /logs/_update/101
{
  "script": {
    "source" : "ctx._source.number_value = 11"
  },
  "upsert": {
    "transaction_id" : "98632897698470u"
  }
}

GET /logs/_doc/101


############
# BATCH Insert with NDJSON (a specific JSON per line)
# If we use index, it will insert or update a document in the index.
# If using create, it will only create and if the document exists, it will throw an error.
# POST /logs/_bulk
POST /_bulk
{"index" : {"_index" : "logs", "_id" : 200}}
{"transaction_id" : "fdskjdfisuhojaoihjr","application_id" : "JOHN_NEW_APP"}
{"create" : {"_index" : "logs", "_id" : 201}}
{"transaction_id" : "dfsoiuhfiuhg","application_id" : "TANYA_APP"}

# This insert of documents has the index name specified in the URI.
# Also, the _id is not specified, therefore is going to be assigned by ES
POST /logs/_bulk
{"create" : {}}
{"transaction_id" : "gsldknoi"}
{"create" : {}}
{"transaction_id" : "r978h2oin"}
{"create" : {}}
{"transaction_id" : "fsodjno"}

GET /logs/_search
{
  "query": {
    "match_all": {}
  }
}






-------------------------------------------


PUT /reviews_temp
{
  "settings": {
    "index.mapping.coerce" : false
  },
  "mappings": {
    "properties": {
      "rating" : {"type" : "float"},
      "content" : {"type" : "text"},
      "product_id" : {"type" : "integer"},
      "author" : {
        "properties": {
          "first_name" : {"type" : "text"},
          "last_name" : {"type" : "text"},
          "email" : {"type" : "keyword", "coerce" : false}
      }}
    }
  }
}

PUT /reviews/_doc/1
{
  "rating" : 5.0,
  "content" : "Great movie, sad ending.",
  "product_id" : 123,
  "author" : {
    "first_name" : "John",
    "last_name" : "Martinez",
    "email" : "john@gmail.com"
  }
}

GET /reviews_new/_search
{
  "query": {
    "match_all": {}
  }
}

GET /reviews/_mapping/
GET /reviews/_mapping/field/author.email

# Add new mapping to exisinting index
PUT /reviews/_mapping
{
  "properties" : {
    "created_at" : {
      "type" : "date"
    }
  }
}

PUT /reviews/_doc/2
{
  "rating" : 3.4,
  "content" : "Not bad at all.",
  "product_id" : 123,
  "created_at" : "2015-03-27",
  "author" : {
    "first_name" : "Tanya",
    "last_name" : "Martinez",
    "email" : "tanya@gmail.com"
  }
}

PUT /reviews/_doc/3
{
  "rating" : 1.2,
  "content" : "I didn't like it.",
  "product_id" : 123,
  "created_at" : "2015-03-27T13:07:22Z",
  "author" : {
    "first_name" : "Sean",
    "last_name" : "Martinez",
    "email" : "sean@gmail.com"
  }
}

PUT /reviews/_doc/4
{
  "rating" : 4.5,
  "content" : "More or less",
  "product_id" : 123,
  "created_at" : "2015-03-27T13:07:22+01:00",
  "author" : {
    "first_name" : "Carlo",
    "last_name" : "Ponce",
    "email" : "carole@gmail.com"
  }
}

PUT /reviews/_doc/5
{
  "rating" : 5.0,
  "content" : "AMAZING!!!",
  "product_id" : 123,
  "created_at" : 1436011284000,
  "author" : {
    "first_name" : "Berto",
    "last_name" : "Mart",
    "email" : "bmart@gmail.com"
  }
}


# Re-indexing
PUT /reviews_new
{
    "mappings": {
      "properties": {
        "author": {
          "properties": {
            "email": {
              "type": "keyword"
            },
            "first_name": {
              "type": "text"
            },
            "last_name": {
              "type": "text"
            }
          }
        },
        "content": {
          "type": "text"
        },
        "created_at": {
          "type": "date"
        },
        "product_id": {
          "type": "keyword"
        },
        "rating": {
          "type": "float"
        }
      }
    }
}

POST /_reindex
{
  "source": {"index": "reviews"},
  "dest": {"index": "reviews_new"}
}

POST /_reindex
{
  "source": {"index": "reviews"},
  "dest": {"index": "reviews_new"},
  "script": {
    "source": """
      if (ctx._source.product_id != null) {
        ctx._source.product_id = ctx._source.product_id.toString();
      }
    """
  }
}

POST /reviews_new/_delete_by_query
{
  "query" : {
    "match_all" : {}
  }
}

POST /reviews_new/_search
{
  "query" : {
    "match_all" : {}
  }
}

GET /reviews/_mapping




